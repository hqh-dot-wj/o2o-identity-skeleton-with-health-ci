generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://root:root@localhost:3307/identity"
}

enum IdentityType {
  CONSUMER
  MERCHANT
  WORKER
}

model UserAccount {
  id            String   @id @default(cuid())
  email         String?  @unique
  phone         String?  @unique
  passwordHash  String?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  identities Identity[]
  memberships Membership[]
  providers  UserProvider[]
}

model Tenant {
  id        String   @id @default(cuid())
  name      String
  type      String   @default("MERCHANT")
  createdAt DateTime @default(now())

  identities Identity[]
  memberships Membership[]
}

model Identity {
  id          String       @id @default(cuid())
  userId      String
  tenantId    String?
  type        IdentityType
  displayName String?

  user   UserAccount @relation(fields: [userId], references: [id])
  tenant Tenant?     @relation(fields: [tenantId], references: [id])
  
  // 反向关系字段
  membershipsAsDefault Membership[]
  
  @@index([userId, tenantId, type])
}

model Role {
  id        String   @id @default(cuid())
  key       String   @unique
  name      String
  createdAt DateTime @default(now())

  permissions RolePermission[]
  memberships Membership[]
}

model Permission {
  id   String @id @default(cuid())
  key  String @unique
  name String
  
  // 反向关系字段
  rolePermissions RolePermission[]
}

model RolePermission {
  roleId       String
  permissionId String
  role       Role       @relation(fields: [roleId], references: [id])
  permission Permission @relation(fields: [permissionId], references: [id])

  @@id([roleId, permissionId])
}

model Membership {
  id        String   @id @default(cuid())
  userId    String
  tenantId  String
  roleId    String
  defaultIdentityId String?

  user    UserAccount @relation(fields: [userId], references: [id])
  tenant  Tenant      @relation(fields: [tenantId], references: [id])
  role    Role        @relation(fields: [roleId], references: [id])
  defaultIdentity Identity? @relation(fields: [defaultIdentityId], references: [id])

  @@unique([userId, tenantId, roleId])
  @@index([userId, tenantId])
}

model UserProvider {
  id        String   @id @default(cuid())
  userId    String
  provider  String
  openId    String
  unionId   String?
  createdAt DateTime @default(now())

  user UserAccount @relation(fields: [userId], references: [id])

  @@unique([provider, openId])
}
